# Self-validation workflow: Uses the AI Contribution Validator Action to validate its own PRs
# This "dogfooding" approach ensures the action works in real-world scenarios and catches
# regressions before they affect users. The workflow runs on all PR events to mirror
# typical usage patterns.
name: Validate PR

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write # Required to create/update PR comments
  statuses: write # Required to set commit status checks

jobs:
  validate:
    name: AI Validation
    runs-on: ubuntu-latest
    # Skip draft PRs to avoid unnecessary API calls during development
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Use the local action (./.) to validate this repository's own PRs
      # This tests the action in its exact deployment scenario
      - name: Validate PR with AI
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
          guidelines-file: "CONTRIBUTING.md"
          gemini-model: "gemini-1.5-flash"
          max-pr-size: "5000"
          fail-on-errors: false
          comment-identifier: "ai-validator-dogfood"
        continue-on-error: true

      # Fallback error reporting if the action itself fails to provide feedback
      - name: Comment on validation failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **AI Validation Failed**\n\nThe AI validation action encountered an error. Please check the workflow logs for details.'
            })
